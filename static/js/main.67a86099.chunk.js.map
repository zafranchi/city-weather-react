{"version":3,"sources":["Weather.js","Autocomplete.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","iconUrl","detailsClassNames","visible","icon","className","temp","src","alt","city","humidity","pressure","tempMin","tempMax","Autocomplete","useState","options","setOptions","activeOption","setActiveOption","filteredOptions","setFilteredOptions","showOptions","setShowOptions","userInput","setUserInput","weatherVisibility","setWeatherVisibility","weather","setWeather","useEffect","loadedData","JSON","parse","stringify","cityNamesData","cityNames","map","item","key","push","optionList","handleClick","event","target","innerText","length","optionName","index","onClick","type","onChange","userInputValue","value","filteredOptionValues","filter","toLowerCase","indexOf","onKeyDown","keyCode","console","log","fetch","then","res","json","data","undefined","main","Math","round","temp_min","temp_max","catch","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67a86099.chunk.js","sourcesContent":["import React from 'react';\nimport './Weather.css';\n\nfunction Weather(props) {\n\n  let detailsClassNames = 'details ';\n  if (props.visible === 0) {\n    detailsClassNames = detailsClassNames + 'not-visible';\n  }\n\n  let iconUrl;\n  if (props.icon !== '') {\n    iconUrl = \"https://openweathermap.org/img/w/\" + props.icon + \".png\";;\n  } else {\n    iconUrl = '';\n  }\n\n  return (\n    <div className=\"weather-info\">\n      <div className={ detailsClassNames }>\n        <div className=\"temperature\">{ props.temp }°</div>\n        <div className=\"summary\">\n          <img className=\"wicon\" src={ iconUrl } alt=\"Weather icon\" />\n          { props.city }\n        </div>\n        <div className=\"humidity\">humidity: { props.humidity }%</div>\n        <div className=\"pressure\">pressure: { props.pressure }hPa</div>\n        <div className=\"tempMin\">Min: { props.tempMin }°</div>\n        <div className=\"tempMax\">Max: { props.tempMax }°</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Weather;\n","import React, { useState, useEffect } from 'react';\nimport './Autocomplete.css';\nimport Weather from './Weather';\nimport cityNamesData from './ca_cities.json';\n\n\nfunction Autocomplete() {\n\n  const [options, setOptions] = useState([]);\n  const [activeOption, setActiveOption] = useState(0);\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [showOptions, setShowOptions] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [weatherVisibility, setWeatherVisibility] = useState(0);\n  const [weather, setWeather] = useState(\n    {\n      icon: '',\n      temp: '',\n      pressure: '',\n      humidity: '',\n      tempMin: '',\n      tempMax: ''\n    }\n  );\n\n  /**\n    Reading city names from a local json file\n  **/\n  useEffect(() => {\n    let loadedData = JSON.parse(JSON.stringify(cityNamesData));\n    let cityNames = [];\n    loadedData.map((item, key) =>\n      cityNames.push(item.city)\n    );\n    setOptions(cityNames);\n\n  } , []);\n\n  /**\n    When the user enters value, the filtered options should be updated\n  **/\n  const handleChange = (event) => {\n\n    let userInputValue = event.target.value;\n    let filteredOptionValues = options.filter(\n      (optionName) =>\n        optionName.toLowerCase().indexOf(userInputValue.toLowerCase()) > -1\n    );\n\n    setActiveOption(0);\n    setFilteredOptions(filteredOptionValues);\n    setShowOptions(true);\n    setUserInput(event.target.value);\n    setWeatherVisibility(0);\n  };\n\n  /**\n    When the user clicks on an option, the filtered options should not be displayed\n  **/\n  const handleClick = (event) => {\n    setActiveOption(0);\n    setFilteredOptions([]);\n    setShowOptions(false);\n    setUserInput(event.target.innerText);\n    setWeatherVisibility(0);\n  };\n\n  /**\n    When the user travers the list by the keyboard, the selected option should be changed\n  **/\n  const handleKeyDown = (event) => {\n\n    if (event.keyCode === 13) { //enter key\n      setActiveOption(0);\n      setShowOptions(false);\n      setUserInput(filteredOptions[activeOption]);\n\n    } else if (event.keyCode === 38) { // up arrow\n      if (activeOption === 0) {\n        return;\n      }\n      setActiveOption(activeOption - 1);\n\n    } else if (event.keyCode === 40) { // down arrow\n      if (activeOption === filteredOptions.length - 1) {\n        console.log(activeOption);\n        return;\n      }\n      setActiveOption(activeOption + 1);\n    }\n\n    setWeatherVisibility(0);\n\n  };\n\n  /**\n    Getting weather information by calling Open Weather API\n  **/\n  const getWeatherInfo = (event) => {\n\n    let kelvinSource = 273.15;\n\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=' + userInput + ',ca&APPID=1eb0b87458ee60378c9b2bba190c0dc4')\n      .then(res => res.json())\n      .then((data) => {\n        if(data.main !== undefined) {\n          setWeatherVisibility(1);\n          setWeather({\n            temp: Math.round((data.main.temp - kelvinSource)),\n            tempMin: Math.round((data.main.temp_min - kelvinSource)),\n            tempMax: Math.round((data.main.temp_max - kelvinSource)),\n            humidity: (data.main.humidity),\n            pressure: (data.main.pressure),\n            icon: (data.weather[0].icon)\n          });\n        }\n      })\n      .catch(console.log);\n  };\n\n  let optionList;\n  if (showOptions && userInput) {\n    if (filteredOptions.length) {\n      optionList = (\n        <ul className=\"options\">\n          {filteredOptions.map((optionName, index) => {\n            let className;\n            if (index === activeOption) {\n              className = 'option-active';\n            }\n            return (\n              <li className={className} key={optionName} onClick={handleClick}>\n                {optionName}\n              </li>\n            );\n          })}\n        </ul>\n      );\n    } else {\n      optionList = (\n        <div className=\"no-options\">\n          <em>No Option!</em>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"search-container\">\n        <div className=\"search\">\n          <div className=\"hint\">\n            <p>\n              Choose the city and click\n              on the search button to see its weather:\n            </p>\n          </div>\n          <input\n            type=\"text\"\n            className=\"search-box\"\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            value={userInput}\n          />\n          <input\n            type=\"submit\"\n            value=\"\"\n            className=\"search-btn\"\n            onClick={getWeatherInfo}\n           />\n        </div>\n        {optionList}\n      </div>\n\n      <div className=\"weather-container\">\n        <Weather\n          icon={ weather.icon }\n          temp={ weather.temp }\n          pressure={ weather.pressure }\n          humidity={ weather.humidity }\n          tempMin={ weather.tempMin}\n          tempMax={ weather.tempMax }\n          visible={ weatherVisibility }\n          city={ userInput }\n        />\n      </div>\n    </div>\n  );\n\n}\n\nexport default Autocomplete;\n","import React from 'react';\nimport './App.css';\nimport Autocomplete from './Autocomplete'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Autocomplete />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}