{"version":3,"sources":["logo.svg","Autocomplete.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","onChange","e","console","log","options","props","currentTarget","value","filter","optionName","toLowerCase","indexOf","setState","onClick","innerText","onKeyDown","keyCode","length","optionList","this","className","map","index","key","Fragment","type","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,mKC+H5BC,G,MA3Hf,2MAMEC,MAAQ,CACNC,aAAc,EACdC,gBAAiB,GACjBC,aAAa,EACbC,UAAW,IAVf,EAaEC,SAAW,SAACC,GACVC,QAAQC,IAAI,aADI,IAGRC,EAAY,EAAKC,MAAjBD,QACFL,EAAYE,EAAEK,cAAcC,MAE5BV,EAAkBO,EAAQI,QAC9B,SAACC,GAAD,OACEA,EAAWC,cAAcC,QAAQZ,EAAUW,gBAAkB,KAGjE,EAAKE,SAAS,CACZhB,aAAc,EACdC,kBACAC,aAAa,EACbC,UAAWE,EAAEK,cAAcC,SA5BjC,EAgCEM,QAAU,SAACZ,GACT,EAAKW,SAAS,CACZhB,aAAc,EACdC,gBAAiB,GACjBC,aAAa,EACbC,UAAWE,EAAEK,cAAcQ,aArCjC,EAyCEC,UAAY,SAACd,GAAO,IAAD,EACyB,EAAKN,MAAvCC,EADS,EACTA,aAAcC,EADL,EACKA,gBAEtB,GAAkB,KAAdI,EAAEe,QACJ,EAAKJ,SAAS,CACZhB,aAAc,EACdE,aAAa,EACbC,UAAWF,EAAgBD,UAExB,GAAkB,KAAdK,EAAEe,QAAgB,CAC3B,GAAqB,IAAjBpB,EACF,OAEF,EAAKgB,SAAS,CAAEhB,aAAcA,EAAe,SACxC,GAAkB,KAAdK,EAAEe,QAAgB,CAC3B,GAAIpB,IAAiBC,EAAgBoB,OAAS,EAE5C,YADAf,QAAQC,IAAIP,GAGd,EAAKgB,SAAS,CAAEhB,aAAcA,EAAe,MA5DnD,wEAgEY,IAcJsB,EAZFlB,EAUEmB,KAVFnB,SACAa,EASEM,KATFN,QACAE,EAQEI,KARFJ,UAJK,EAYHI,KANFxB,MACEC,EAPG,EAOHA,aACAC,EARG,EAQHA,gBACAC,EATG,EASHA,YACAC,EAVG,EAUHA,UA+BJ,OA1BID,GAAeC,IAEfmB,EADErB,EAAgBoB,OAEhB,wBAAIG,UAAU,WACXvB,EAAgBwB,KAAI,SAACZ,EAAYa,GAChC,IAAIF,EAIJ,OAHIE,IAAU1B,IACZwB,EAAY,iBAGZ,wBAAIA,UAAWA,EAAWG,IAAKd,EAAYI,QAASA,GACjDJ,OAQT,yBAAKW,UAAU,cACb,4CAON,kBAAC,IAAMI,SAAP,KACE,yBAAKJ,UAAU,UACb,2BACEK,KAAK,OACLL,UAAU,aACVpB,SAAUA,EACVe,UAAWA,EACXR,MAAOR,IAET,2BAAO0B,KAAK,SAASlB,MAAM,GAAGa,UAAU,gBAEzCF,OArHT,GAAkCQ,cCoBnBC,MAlBf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CACEhB,QAAS,CACP,SACA,YACA,UACA,eACA,QACA,cACA,iBCLUwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dea11576.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport './Autocomplete.css';\nimport PropTypes from 'prop-types';\n\nexport class Autocomplete extends Component {\n\n  static propTypes = {\n    options: PropTypes.instanceOf(Array).isRequired,\n  };\n\n  state = {\n    activeOption: 0,\n    filteredOptions: [],\n    showOptions: false,\n    userInput: ''\n  };\n\n  onChange = (e) => {\n    console.log('onChanges');\n\n    const { options } = this.props;\n    const userInput = e.currentTarget.value;\n\n    const filteredOptions = options.filter(\n      (optionName) =>\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    this.setState({\n      activeOption: 0,\n      filteredOptions,\n      showOptions: true,\n      userInput: e.currentTarget.value\n    });\n  };\n\n  onClick = (e) => {\n    this.setState({\n      activeOption: 0,\n      filteredOptions: [],\n      showOptions: false,\n      userInput: e.currentTarget.innerText\n    });\n  };\n\n  onKeyDown = (e) => {\n    const { activeOption, filteredOptions } = this.state;\n\n    if (e.keyCode === 13) {\n      this.setState({\n        activeOption: 0,\n        showOptions: false,\n        userInput: filteredOptions[activeOption]\n      });\n    } else if (e.keyCode === 38) {\n      if (activeOption === 0) {\n        return;\n      }\n      this.setState({ activeOption: activeOption - 1 });\n    } else if (e.keyCode === 40) {\n      if (activeOption === filteredOptions.length - 1) {\n        console.log(activeOption);\n        return;\n      }\n      this.setState({ activeOption: activeOption + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n\n      state: {\n        activeOption,\n        filteredOptions,\n        showOptions,\n        userInput\n      }\n    } = this;\n\n    let optionList;\n    if (showOptions && userInput) {\n      if (filteredOptions.length) {\n        optionList = (\n          <ul className=\"options\">\n            {filteredOptions.map((optionName, index) => {\n              let className;\n              if (index === activeOption) {\n                className = 'option-active';\n              }\n              return (\n                <li className={className} key={optionName} onClick={onClick}>\n                  {optionName}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        optionList = (\n          <div className=\"no-options\">\n            <em>No Option!</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            className=\"search-box\"\n            onChange={onChange}\n            onKeyDown={onKeyDown}\n            value={userInput}\n          />\n          <input type=\"submit\" value=\"\" className=\"search-btn\" />\n        </div>\n        {optionList}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Autocomplete from './Autocomplete'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Autocomplete\n        options={[\n          'Papaya',\n          'Persimmon',\n          'Paw Paw',\n          'Prickly Pear',\n          'Peach',\n          'Pomegranate',\n          'Pineapple'\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}