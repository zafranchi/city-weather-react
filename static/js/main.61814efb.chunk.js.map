{"version":3,"sources":["logo.svg","Weather.js","Autocomplete.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","cityName","iconUrl","this","props","icon","temp","pressure","humidity","tempMin","tempMax","city","detailsClassNames","Fragment","className","src","alt","Component","Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","weather","onChange","e","options","currentTarget","value","filter","optionName","toLowerCase","indexOf","setState","onClick","innerText","onKeyDown","keyCode","length","console","log","getWeatherInfo","fetch","then","res","json","data","Math","round","main","temp_min","temp_max","catch","optionList","map","index","key","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61814efb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport './Weather.css';\n\nexport class Weather extends Component {\n\n\n  render() {\n\n    const {\n      icon,\n      temp,\n      pressure,\n      humidity,\n      tempMin,\n      tempMax,\n      city\n    } = this.props;\n\n    let cityName;\n    if (city != '') {\n      cityName = city;\n    } else {\n      cityName = '';\n    }\n\n    let visibility;\n    if (temp == '0' || temp != '') {\n      visibility = '';\n    } else {\n      visibility = 'not-visible';\n    }\n\n    let iconUrl;\n    if (icon != '') {\n      iconUrl = \"https://openweathermap.org/img/w/\" + icon + \".png\";;\n    } else {\n      iconUrl = '';\n    }\n\n    let detailsClassNames = 'details ' + visibility;\n\n    return (\n      <React.Fragment>\n        <div className=\"weather-info\">\n          <div className={ detailsClassNames }>\n            <div className=\"temperature\">{ temp }°</div>\n            <div className=\"summary\">\n              <img className=\"wicon\" src={ iconUrl } alt=\"Weather icon\" />\n              { cityName }\n            </div>\n            <div className=\"humidity\">humidity: { humidity }%</div>\n            <div className=\"pressure\">pressure: { pressure }hPa</div>\n            <div className=\"tempMin\">Min: { tempMin }°</div>\n            <div className=\"tempMax\">Max: { tempMax }°</div>\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport './Autocomplete.css';\nimport Weather from './Weather';\nimport PropTypes from 'prop-types';\n\nexport class Autocomplete extends Component {\n\n  static propTypes = {\n    options: PropTypes.instanceOf(Array).isRequired,\n  };\n\n  state = {\n    activeOption: 0,\n    filteredOptions: [],\n    showOptions: false,\n    userInput: '',\n    weather: {\n      icon: '',\n      temp: '',\n      pressure: '',\n      humidity: '',\n      tempMin: '',\n      tempMax: '',\n      city: ''\n    }\n  };\n\n  onChange = (e) => {\n\n    const { options } = this.props;\n    const userInput = e.currentTarget.value;\n\n    const filteredOptions = options.filter(\n      (optionName) =>\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    this.setState({\n      activeOption: 0,\n      filteredOptions,\n      showOptions: true,\n      userInput: e.currentTarget.value,\n      weather: {\n        temp: '',\n        tempMin: '',\n        tempMax: '',\n        humidity: '',\n        pressure: '',\n        icon: '',\n        city: ''\n      }\n    });\n  };\n\n  onClick = (e) => {\n    this.setState({\n      activeOption: 0,\n      filteredOptions: [],\n      showOptions: false,\n      userInput: e.currentTarget.innerText,\n      weather: {\n        temp: '',\n        tempMin: '',\n        tempMax: '',\n        humidity: '',\n        pressure: '',\n        icon: '',\n        city: ''\n      }\n    });\n  };\n\n  onKeyDown = (e) => {\n    const { activeOption, filteredOptions } = this.state;\n\n    if (e.keyCode === 13) { //enter key\n      this.setState({\n        activeOption: 0,\n        showOptions: false,\n        userInput: filteredOptions[activeOption],\n        weather: {\n          temp: '',\n          tempMin: '',\n          tempMax: '',\n          humidity: '',\n          pressure: '',\n          icon: '',\n          city: ''\n        }\n      });\n    } else if (e.keyCode === 38) { // up arrow\n      if (activeOption === 0) {\n        return;\n      }\n      this.setState({\n        activeOption: activeOption - 1,\n        weather: {\n          temp: '',\n          tempMin: '',\n          tempMax: '',\n          humidity: '',\n          pressure: '',\n          icon: '',\n          city: ''\n        }\n      });\n    } else if (e.keyCode === 40) { // down arrow\n      if (activeOption === filteredOptions.length - 1) {\n        console.log(activeOption);\n        return;\n      }\n      this.setState({\n        activeOption: activeOption + 1,\n        weather: {\n          temp: '',\n          tempMin: '',\n          tempMax: '',\n          humidity: '',\n          pressure: '',\n          icon: '',\n          city: ''\n        }\n      });\n    }\n  };\n\n  getWeatherInfo = (e) => {\n    const {\n      weather,\n      userInput\n    } = this.state;\n\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=' + userInput + ',ca&APPID=1eb0b87458ee60378c9b2bba190c0dc4')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          weather: {\n            temp: Math.round((data.main.temp - 273.15)),\n            tempMin: Math.round((data.main.temp_min - 273.15)),\n            tempMax: Math.round((data.main.temp_max - 273.15)),\n            humidity: (data.main.humidity),\n            pressure: (data.main.pressure),\n            icon: (data.weather[0].icon),\n            city: userInput\n          }\n        })\n      })\n      .catch(console.log);\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      getWeatherInfo,\n\n      state: {\n        activeOption,\n        filteredOptions,\n        showOptions,\n        userInput,\n        weather\n      }\n    } = this;\n\n    let optionList;\n    if (showOptions && userInput) {\n      if (filteredOptions.length) {\n        optionList = (\n          <ul className=\"options\">\n            {filteredOptions.map((optionName, index) => {\n              let className;\n              if (index === activeOption) {\n                className = 'option-active';\n              }\n              return (\n                <li className={className} key={optionName} onClick={onClick}>\n                  {optionName}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        optionList = (\n          <div className=\"no-options\">\n            <em>No Option!</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <div className=\"search-container\">\n          <div className=\"search\">\n            <div className=\"hint\">\n              <p>\n                Please choose the city and click\n              </p>\n              <p>\n                on the search button to see its weather:\n              </p>\n            </div>\n            <input\n              type=\"text\"\n              className=\"search-box\"\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              value={userInput}\n            />\n            <input\n              type=\"submit\"\n              value=\"\"\n              className=\"search-btn\"\n              onClick={getWeatherInfo}\n             />\n          </div>\n          {optionList}\n        </div>\n\n        <div className=\"weather-container\">\n          <Weather\n            icon={ weather.icon }\n            temp={ weather.temp }\n            pressure={ weather.pressure }\n            humidity={ weather.humidity }\n            tempMin={ weather.tempMin}\n            tempMax={ weather.tempMax }\n            city={ userInput }\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Autocomplete from './Autocomplete'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Autocomplete\n        options={[\n          'Toronto',\n          'Montreal',\n          'Vancouver',\n          'Ottawa',\n          'Calgary',\n          'Edmonton',\n          'Hamilton',\n          'Winnipeg',\n          'Québec',\n          'Oshawa',\n          'Kitchener',\n          'Halifax',\n          'London',\n          'Windsor',\n          'Victoria',\n          'Saskatoon',\n          'Barrie',\n          'Regina'\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}